package LinkedList;

public class LinkedListAlgorithms {
  
  
  public static void printElementsOfLinkedList(Node head)
  {
    while(head != null)
    {
      System.out.println(head.data);
      head = head.next;
    }
  }
  
  public static void LinkedListPrintUsingRecursion(Node head)
  {
    if(head == null) return;
    System.out.println(head.data);
    LinkedListPrintUsingRecursion(head.next);
  }
  
  public static void LinkedListReversePrintUsingRecursion(Node head)
  {
    if(head == null) return;
    LinkedListReversePrintUsingRecursion(head.next);
    System.out.println(head.data);
  }
  
  public static Node ReverseLinkedList(Node head)
  {
    Node previous = null;
    Node next;
    
    while(head != null)
    {
      next = head.next;
      head.next = previous;
      previous = head;
      head = next;
    }
    return previous;
  }
  
  public static void addNodeatPosition(Node head , int position)
  {
    while(position > 0)
    {
      head = head.next;
      position--;
    }
    
  }
  
  public static void deleteNode(Node head , int deleteItem)
  {
    
  }

}
