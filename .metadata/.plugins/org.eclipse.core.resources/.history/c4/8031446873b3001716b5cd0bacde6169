package pa1part3;

import java.io.PrintStream;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.ServerSocket;
import java.util.*;



/*
* A server that delivers status messages to other users.
*/
public class Server {

	// Create a socket for the server 
	private static ServerSocket serverSocket = null;
	// Create a socket for the server 
	private static Socket userSocket = null;
	// Maximum number of users 
	private static int maxUsersCount = 5;
	// An array of threads for users
	private static userThread[] users = null;


	public static void main(String args[]) {

		// The default port number.
		int portNumber = 8000;
		if (args.length < 2) {
			System.out.println("Usage: java Server <portNumber>\n"
					+ "Now using port number=" + portNumber + "\n" +
					"Maximum user count=" + maxUsersCount);
		} else {
			portNumber = Integer.valueOf(args[0]).intValue();
			maxUsersCount = Integer.valueOf(args[1]).intValue();
		}

		System.out.println("Server now using port number=" + portNumber + "\n" + "Maximum user count=" + maxUsersCount);
		
		// Array of userThread objects(Maximum = 5 in our case)
		
		users = new userThread[maxUsersCount];


		/*
		 * Open a server socket on the portNumber (default 8000). 
		 */
		try {
			serverSocket = new ServerSocket(portNumber);
		} catch (IOException e) {
			System.out.println(e);
		}

		/*
		 * Create a user socket for each connection and pass it to a new user
		 * thread.
		 */
		while (true) {
			try {
				userSocket = serverSocket.accept();
				int i = 0;
				for (i = 0; i < maxUsersCount; i++) {
					if (users[i] == null) {
						// Calling the userThread Constructor
						users[i] = new userThread(userSocket, users);
						// STrating the thread
						users[i].start();
						break;
					}
				}
	// After filling the maximum spaces for clients, Server will Print Busy Message.
				if(i == maxUsersCount){               
                    System.out.println("Busy");
                    userSocket.close();
                }
			} catch (IOException e) {
				System.out.println(e);
			}
		}
	}
}



class userThread extends Thread
{
	private Thread t;
    private Socket userSocket = null;
    private BufferedReader input_stream = null;
    private PrintStream output_stream = null;
    private final userThread[] users;
    private int maxUsersCount;
    private String userName = null;
    private int friends[] = {0,0,0,0,0};
    
	public userThread(Socket userSocket, userThread[] users)
	{
		this.users = users;
		this.userSocket = userSocket;
		this.maxUsersCount = users.length;
	}
	
	public void run()
	{
		int maxUsersCount = this.maxUsersCount;
		userThread[] users = this.users;

		try {
			/*
			 * Create input and output streams for this client.
			 * Read user name.
			 */
			input_stream = new BufferedReader(new InputStreamReader(userSocket.getInputStream()));
			output_stream = new PrintStream(userSocket.getOutputStream());
			
			// Asks the user about his/her UserName
			
			output_stream.println("Enter Your Username : ");
			userName = input_stream.readLine().trim();
			
			
			// Print Welcome Message
			output_stream.println("#welcome "+this.userName);
			
			// Broadcast the "#newUser Message"
			for(int i =0;i<maxUsersCount;i++) {
                if(users[i] != null && users[i] != this){  // Broadcasting
                    users[i].output_stream.println("#newuser : "+userName);
                    System.out.println("User: "+userName+" Entered!!!");
                }
			}
			
			while(true)
			{
				String messageLine = input_stream.readLine();
				System.out.println(messageLine);
				
				if(messageLine.equals("exit"))
					break;
				
				else if(messageLine.startsWith("#friendme"))
				{
					String friendName = messageLine.substring(9);
					for(int i = 0 ; i < this.maxUsersCount ; i++)
					{
						if(users[i].userName.equals(friendName))
						{
							users[i].output_stream.println(this.userName+" wants to be friends with you : ");
							break;
						}
					}
				}
				
				else if(messageLine.startsWith("@friend"))
				{
					String friend_to_become = messageLine.substring(7);
					
					for(int i = 0 ; i < maxUsersCount ; i++){
                        if(users[i].userName.equals(friend_to_become)){  //find the person whom you want to make friend, stands by i
                            for(int j=0 ; j < maxUsersCount ; j++){
                                if(users[j].userName.equals(this.userName)){   //find the person who sned message, stands by j
                                    users[j].friends[i] = 1;       //make a friend
                                    users[i].friends[j] = 1;       //make a friend
                                    users[i].output_stream.println("You are now friends with "+this.userName);
                                    users[j].output_stream.println("You are now friends with "+friend_to_become);
                                    break;
                                }
                            }
                        }
                        break;
                    }
				}
				
				else if(messageLine.startsWith("@deny"))
				{
					String friend_denied = messageLine.substring(5);
					for(int i = 0 ; i < maxUsersCount ; i++)
					{
						if(users[i].userName.equals(friend_denied))
						{
							for(int j = 0 ; j < maxUsersCount ; j++)
							{
								if(users[j].userName ==this.userName)
								{
									users[j].output_stream.println("You denied being friends with "+friend_denied);
									users[i].output_stream.println("Your request is denied by "+this.userName);
								}
							}
						}
							
					}
				}
				
				else if(messageLine.startsWith("#unfriend"))
				{
					String friend_not_to_be = messageLine.substring(9);
					for (int i = 0; i < maxUsersCount; i++) {
                        if (users[i].userName.equals(friend_not_to_be)) {   //find the person whom you want to unfriend, stands by i
                            for (int j = 0; j < maxUsersCount; j++) {
                                if (users[j].userName == this.userName) {    //find the person who sned message, stands by j
                                    users[j].friends[i] = 0;       //unfriend the relationship
                                    users[i].friends[j] = 0;       //unfriend the relationship
                                    users[i].output_stream.println("You are no longer friends with "+this.userName);
                                    users[j].output_stream.println("You are no longer friends with "+friend_not_to_be);
                                    break;
                                }
                            }
                        }
                        break;
                    }
				}
				
			}
			
			for(int i = 0 ; i < maxUsersCount ; i++) {               //Broadcasting
                if(users[i] != null && users[i] != this){
                    users[i].output_stream.println("#Leave : " +this.userName);
                }
            }
			
			output_stream.println("#Bye");
			
			//close the thread
			
			for(int i = 0 ; i < maxUsersCount ; i++){                 
                if(users[i] == this){
                    users[i] = null;
                }
            }

			// conversation ended.
			
			
			input_stream.close();
			output_stream.close();
			userSocket.close();
		} catch (IOException e) {
			System.out.println("Thread Interrupted");
		}
		System.out.println("Thread Exiting");

	}
}

