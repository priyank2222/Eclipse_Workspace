package pa2_2;

import java.util.*;
import java.io.*;

public class StudentNetworkSimulator extends NetworkSimulator
{
    /*
     * Predefined Constants (static member variables):
     *
     *   int MAXDATASIZE : the maximum size of the Message data and
     *                     Packet payload
     *
     *   int A           : a predefined integer that represents entity A
     *   int B           : a predefined integer that represents entity B 
     *
     * Predefined Member Methods:
     *
     *  void stopTimer(int entity): 
     *       Stops the timer running at "entity" [A or B]
     *  void startTimer(int entity, double increment): 
     *       Starts a timer running at "entity" [A or B], which will expire in
     *       "increment" time units, causing the interrupt handler to be
     *       called.  You should only call this with A.
     *  void toLayer3(int callingEntity, Packet p)
     *       Puts the packet "p" into the network from "callingEntity" [A or B]
     *  void toLayer5(String dataSent)
     *       Passes "dataSent" up to layer 5
     *  double getTime()
     *       Returns the current time in the simulator.  Might be useful for
     *       debugging.
     *  int getTraceLevel()
     *       Returns TraceLevel
     *  void printEventList()
     *       Prints the current event list to stdout.  Might be useful for
     *       debugging, but probably not.
     *
     *
     *  Predefined Classes:
     *
     *  Message: Used to encapsulate a message coming from layer 5
     *    Constructor:
     *      Message(String inputData): 
     *          creates a new Message containing "inputData"
     *    Methods:
     *      boolean setData(String inputData):
     *          sets an existing Message's data to "inputData"
     *          returns true on success, false otherwise
     *      String getData():
     *          returns the data contained in the message
     *  Packet: Used to encapsulate a packet
     *    Constructors:
     *      Packet (Packet p):
     *          creates a new Packet that is a copy of "p"
     *      Packet (int seq, int ack, int check, String newPayload)
     *          creates a new Packet with a sequence field of "seq", an
     *          ack field of "ack", a checksum field of "check", and a
     *          payload of "newPayload"
     *      Packet (int seq, int ack, int check)
     *          chreate a new Packet with a sequence field of "seq", an
     *          ack field of "ack", a checksum field of "check", and
     *          an empty payload
     *    Methods:
     *      boolean setSeqnum(int n)
     *          sets the Packet's sequence field to "n"
     *          returns true on success, false otherwise
     *      boolean setAcknum(int n)
     *          sets the Packet's ack field to "n"
     *          returns true on success, false otherwise
     *      boolean setChecksum(int n)
     *          sets the Packet's checksum to "n"
     *          returns true on success, false otherwise
     *      boolean setPayload(String newPayload)
     *          sets the Packet's payload to "newPayload"
     *          returns true on success, false otherwise
     *      int getSeqnum()
     *          returns the contents of the Packet's sequence field
     *      int getAcknum()
     *          returns the contents of the Packet's ack field
     *      int getChecksum()
     *          returns the checksum of the Packet
     *      int getPayload()
     *          returns the Packet's payload
     *
     */

    /*   Please use the following variables in your routines.
     *   int WindowSize  : the window size
     *   double RxmtInterval   : the retransmission timeout
     *   int LimitSeqNo  : when sequence number reaches this value, it wraps around
     */

    public static final int FirstSeqNo = 0;
    private int WindowSize;
    private double RxmtInterval;
    private int LimitSeqNo;

    // Add any necessary class variables here.  Remember, you cannot use
    // these variables to send messages error free!  They can only hold
    // state information for A or B.
    // Also add any necessary methods (e.g. checksum of a String)

    // This is the constructor.  Don't touch!
    public StudentNetworkSimulator(int numMessages,
                                   double loss,
                                   double corrupt,
                                   double avgDelay,
                                   int trace,
                                   int seed,
                                   int winsize,
                                   double delay)
    {
        super(numMessages, loss, corrupt, avgDelay, trace, seed);
        WindowSize = winsize;
        LimitSeqNo = winsize+1;
        RxmtInterval = delay;
    }
    
    int nextSeqNum;
    int ack;
    int check;
    String buffer[];
    int baseA;
    int baseB;
    boolean time_on;
    int sws[];
    int rws[];
    String rws_msg[];
    double recordTime[];
    double rtt[];
    
    
    // This routine will be called whenever the upper layer at the sender [A]
    // has a message to send.  It is the job of your protocol to insure that
    // the data in such a message is delivered in-order, and correctly, to
    // the receiving upper layer.
    
    protected void aOutput(Message message)
    {
      
        System.out.println("from layer5 A "+message.getData());
        
        String newPayload;
        newPayload = message.getData();
        buffer[nextSeqNum] = newPayload;
        

        int sum = 0;
        String a = newPayload;
        char b[] = new char[20];
        
        for (int i = 0; i < 20; i++)
        {
            b[i] = a.charAt(i);
            sum = sum + (int)b[i];
        }
        sum = sum + nextSeqNum;
        sum = sum + ack;

        check = sum;
        
        Packet packet = new Packet(nextSeqNum,ack,check,newPayload);
        
        recordTime[packet.getSeqnum()] = getTime();
        
        toLayer3(A,packet);
        
        if(time_on == false)
        {
          
            startTimer(A, 20);
            System.out.println("Timer Start");
            time_on = true;
        }
        
        nextSeqNum++;
    }

    // This routine will be called whenever a packet sent from the B-side 
    // (i.e. as a result of a toLayer3() being done by a B-side procedure)
    // arrives at the A-side.  "packet" is the (possibly corrupted) packet
    // sent from the B-side.
    
    protected void aInput(Packet packet)
    {
        rtt[packet.getAcknum()] = getTime() - recordTime[packet.getAcknum()];
        
        System.out.println(packet.getAcknum());
        System.out.println("Packet seqNum "+packet.getAcknum()+" Transfered");
        
        if(baseA == packet.getAcknum())
        {
            stopTimer(A);
            System.out.println("Timer Stop");
            time_on = false;
            System.out.println("BaseA : "+baseA+" Transfered");
            baseA++;
            
            for(int i = 0 ; i < WindowSize ; i++)
            {
                if(sws[i] == baseA)
                {
                    baseA++;
                    sws[i] = -1;
                }
            }
        }
        
        if(baseA < packet.getAcknum())
        {
            for(int i = 0 ; i < WindowSize ; i++)
            {
                if(sws[i] == -1 || sws[i] < baseA)
                {
                    sws[i] = packet.getAcknum();
                    break;
                }
            }
        }
    }

    // This routine will be called when A's timer expires (thus generating a 
    // timer interrupt). You'll probably want to use this routine to control 
    // the retransmission of packets. See startTimer() and stopTimer(), above,
    // for how the timer is started and stopped. 
    
    
    protected void aTimerInterrupt()
    {
        time_on = false;
        String newPayload;
        
        newPayload = buffer[baseA];

        int sum = 0;
        String a = newPayload;
        char b[] = new char[20];
        
        for (int i = 0 ; i < 20 ; i++)
        {
            b[i] = a.charAt(i);
            sum = sum + (int)b[i];
        }
        
        sum = sum + baseA;
        sum = sum + ack;

        check = sum;
        
        Packet packet = new Packet(baseA, ack, check, newPayload);
        
        System.out.println("reto layer3 A-checksum"+sum);
        System.out.println("reto layer3 A-seqnum"+baseA);
        System.out.println("reto layer3 A-ack"+ack);
        
        recordTime[packet.getSeqnum()] = getTime();
        
        toLayer3(A, packet);
        
        for(int i = baseA ; i < nextSeqNum ; i++)
        {
            int sum1 = 0;
            String a1 = buffer[i];
            char b1[] = new char[20];
            for (int j = 0 ; j < 20 ; j++)
            {
                b1[j] = a1.charAt(j);
                sum = sum + (int)b1[j];
            }
            
            sum = sum + i;
            sum = sum + ack;

            check = sum;
            
            Packet repacket = new Packet(i, ack, check, buffer[i]);
            
            toLayer3(A, repacket);
            
            System.out.println("GBN Resend : seqNum "+i);
        }
        if(time_on == false)
        {
            startTimer(A, 20);
            System.out.println("Timer Restart");
            time_on = true;
        }
    }

    // This routine will be called once, before any of your other A-side 
    // routines are called. It can be used to do any required
    // initialization (e.g. of member variables you add to control the state
    // of entity A).
    protected void aInit()
    {
        time_on = false;
        buffer = new String[maxMessages];
        
        System.out.println("Initialization of Sender A");
        
        baseA =  0;
        nextSeqNum = 0;
        ack = -1;
        check = 0;
        
        sws = new int[WindowSize];
        
        for(int i = 0 ; i < WindowSize ; i++)
        {
            sws[i]=-1;
        }
        
        recordTime = new double[maxMessages];
        rtt = new double[maxMessages];
    }

    // This routine will be called whenever a packet sent from the B-side 
    // (i.e. as a result of a toLayer3() being done by an A-side procedure)
    // arrives at the B-side.  "packet" is the (possibly corrupted) packet
    // sent from the A-side.
    
    protected void bInput(Packet packet)
    {
        System.out.println("B side load : " + packet.getPayload());
        System.out.println("B side seqnum : " + packet.getSeqnum());
        System.out.println("B side ack : " + packet.getAcknum());
        System.out.println("BaseB : " + baseB);
        
        int sum = 0;
        String a = packet.getPayload();
        
        char b[] = new char[20];
        for (int i = 0 ; i < 20 ; i++)
        {
            b[i] = a.charAt(i);
            sum = sum + (int)b[i];
        }
        sum = sum + packet.getSeqnum();
        sum = sum + packet.getAcknum();
        
        System.out.println("B-checksum : " + sum);
        System.out.println("A-checksum : " + packet.getChecksum());
        
        Packet ackPacket = new Packet(packet.getSeqnum(),packet.getAcknum(),packet.getChecksum());
        
        if(sum == packet.getChecksum())
        {
            ackPacket.setAcknum(packet.getSeqnum());
            
            toLayer3(B,ackPacket);
            
            if(packet.getSeqnum() == baseB)
            {
                toLayer5(packet.getPayload());
                
                System.out.println("To Layer 5, seqnum is : "+baseB);
                
                baseB++;
                
                //for(int i=0;i<8;i++){
                //    if(rws[i]==baseB){
                //        rws[i] = -1;
                //        toLayer5(rws_msg[i]);
                //       System.out.println("to layer5, seqnum is:"+baseB);
                //        baseB++;
                //    }
                //}

            }
            //if(packet.getSeqnum()>baseB){
            //    for(int i=0;i<8;i++){
            //        if(rws[i]==-1||rws[i]<baseB){
            //           rws[i]=packet.getSeqnum();
            //            rws_msg[i]=packet.getPayload();
            //            break;
            //        }
            //    }
            //}
        }
        else
        {
            System.out.println("A to B corrupted");
            System.out.println("Wait for Timeout");
        }
    }

    // This routine will be called once, before any of your other B-side 
    // routines are called. It can be used to do any required
    // initialization (e.g. of member variables you add to control the state
    // of entity B).
    
    
    protected void bInit()
    {
        baseB = 0;
        rws_msg = new String[8];

        rws = new int[8];
        for(int i =0;i<8;i++)
        {
            rws[i] = -1;
        }
    }

    // Use to print final statistics
    protected void Simulation_done() 
    {
        double sum = 0;
        int count = 0;
        double avg;
        for(int i = 0 ; i < maxMessages ; i++)
        {
            if(rtt[i]!=0.0)
            {
                sum = sum + rtt[i];
                count++;
            }
        }
        
        avg = sum / count;
       
    }

}