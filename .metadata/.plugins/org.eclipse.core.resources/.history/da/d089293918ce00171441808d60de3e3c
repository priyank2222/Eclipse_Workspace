package pa3part2;

import java.io.*;

/**
 * This is the class that students need to implement. The code skeleton is provided.
 * Students need to implement rtinit(), rtupdate() and linkhandler().
 * printdt() is provided to pretty print a table of the current costs for reaching
 * other nodes in the network.
 */
public class Node {

    public static final int INFINITY = 9999;

    int[] lkcost;		/*The link cost between node 0 and other nodes*/
    int[][] costs;  		/*Define distance table*/
    int nodename;               /*Name of this node*/
    int[] old;
    int[] route;
    /* Class constructor */
    public Node() { }

    /* students to write the following two routines, and maybe some others */
    void rtinit(int nodename, int[] initial_lkcost) 
    {
        this.nodename = nodename;
        costs = new int[4][4];
        old = new int[4];//record the direct connect cost
        route = new int[4];//record the path from this node to node 0,1,2,3
        
        switch(nodename)
        {
            case 0:
                route[0] = 0;
                route[1] = 1;
                route[2] = 2;
                route[3] = -1;
                break;
            case 1:
                route[0] = 0;
                route[1] = 1;
                route[2] = 2;
                route[3] = 3;
                break;
            case 2:
                route[0] = 0;
                route[1] = 1;
                route[2] = 2;
                route[3] = 3;
                break;
            case 3:
                route[0] = -1;
                route[1] = 1;
                route[2] = 2;
                route[3] = 3;
                break;
        }
        //give value to costs[][]
        for(int i=0;i<4;i++)
        {
            if(i==nodename)
            {
                for(int j=0;j<4;j++)
                {
                    costs[i][j] = initial_lkcost[j];
                    old[j] = initial_lkcost[j];
                }
            }
            else
            {
                for(int j=0;j<4;j++){
                    costs[i][j] = INFINITY;
                }
            }
        }
        //transfer
        for(int i =0;i<4;i++)
        {
            if(costs[nodename][i]!=INFINITY)
            {
                Packet sendPacket = new Packet(nodename,i,costs[nodename]);
                NetworkSimulator.tolayer2(sendPacket);
            }
        }

    }

    void rtupdate(Packet rcvdpkt) 
    {
        Packet rpacket = rcvdpkt;
        int tRoute[];
        int temp;
        
        int thatNode = rpacket.sourceid;
        int thisNode = rpacket.destid;
        
        boolean needLie = false;
        boolean change = false;
        
        int fake[] = new int[4];
        int a = 0;

        for(int i=0;i<4;i++)
        {
            if(costs[thatNode][i] != rpacket.mincost[i])  //a costlink has changed
            {
                change = true;
                costs[thatNode][i] = rpacket.mincost[i];

            }
            costs[thatNode][i] = rpacket.mincost[i];
        }
        tRoute = new int[4];
        for(int i=0;i<4;i++)
        {
            tRoute[i] = -1;
        }
        
        System.out.println("this.nodename: "+this.nodename);
        System.out.println("thatNode: "+thatNode);



        for(int i=0;i<4;i++)
        {
            if(this.route[i] == thatNode)   //when this node has a transfer node(that node) to node i
            {
                temp = this.old[i];
                if (temp > costs[thisNode][thatNode] + costs[thatNode][i]) {
                    temp = costs[thisNode][thatNode] + costs[thatNode][i];
                    tRoute[i] = temp;
                    route[i] = thatNode;
                }
                costs[thisNode][i] = temp;
            }
            temp = this.old[i];
            tRoute[i] = costs[thisNode][thatNode]+costs[thatNode][i];
            if(temp > costs[thisNode][thatNode]+costs[thatNode][i]){
                temp = costs[thisNode][thatNode]+costs[thatNode][i];

            }
            if(temp > costs[thisNode][i]){
                temp = costs[thisNode][i];
            }
            if (costs[thisNode][i] != temp) {
                costs[thisNode][i] = temp;
                change = true;
            }
            if(costs[thisNode][i] == tRoute[i] && i != thatNode){
                needLie = true;
                fake[i] = INFINITY;
                this.route[i] = thatNode;
            }
            if(costs[thisNode][i] == this.old[i]){
                this.route[i] = i;
            }
        }
        for(int i=0;i<4;i++){
            if(fake[i]!=INFINITY){
                fake[i] = costs[thisNode][i];
            }
        }
        if(change){//send packet
            for(int i=0;i<4;i++) {
                if(needLie && i==thatNode){
                    Packet routePacket = new Packet(thisNode, thatNode, fake);
                    NetworkSimulator.tolayer2(routePacket);
                }
                else{
                    Packet sendPacket = new Packet(thisNode,i,costs[thisNode]);
                    NetworkSimulator.tolayer2(sendPacket);
                }

            }
        }
        System.out.println("costs in node: "+thisNode);
        for(int i=0;i<4;i++){
            for(int j=0;j<4;j++){
                System.out.print(costs[i][j]+" ");
            }
            System.out.println();
        }
        for(int i=0;i<4;i++){
            System.out.print(route[i]);
        }
    }


    /* called when cost from the node to linkid changes from current value to newcost*/
    void linkhandler(int linkid, int newcost) {
        costs[this.nodename][linkid] = newcost;
        this.old[linkid] = newcost;
        System.out.println("cost changed."+nodename+"-->"+linkid);
        for(int i =0;i<4;i++){
            Packet sendPacket = new Packet(nodename,i,costs[nodename]);
            NetworkSimulator.tolayer2(sendPacket);
        }
    }


    /* Prints the current costs to reaching other nodes in the network */
    void printdt() {
        switch(nodename) {

            case 0:
                System.out.printf("                via     \n");
                System.out.printf("   D0 |    1     2 \n");
                System.out.printf("  ----|-----------------\n");
                System.out.printf("     1|  %3d   %3d \n",costs[1][1], costs[1][2]);
                System.out.printf("dest 2|  %3d   %3d \n",costs[2][1], costs[2][2]);
                System.out.printf("     3|  %3d   %3d \n",costs[3][1], costs[3][2]);
                break;
            case 1:
                System.out.printf("                via     \n");
                System.out.printf("   D1 |    0     2    3 \n");
                System.out.printf("  ----|-----------------\n");
                System.out.printf("     0|  %3d   %3d   %3d\n",costs[0][0], costs[0][2],costs[0][3]);
                System.out.printf("dest 2|  %3d   %3d   %3d\n",costs[2][0], costs[2][2],costs[2][3]);
                System.out.printf("     3|  %3d   %3d   %3d\n",costs[3][0], costs[3][2],costs[3][3]);
                break;
            case 2:
                System.out.printf("                via     \n");
                System.out.printf("   D2 |    0     1    3 \n");
                System.out.printf("  ----|-----------------\n");
                System.out.printf("     0|  %3d   %3d   %3d\n",costs[0][0], costs[0][1],costs[0][3]);
                System.out.printf("dest 1|  %3d   %3d   %3d\n",costs[1][0], costs[1][1],costs[1][3]);
                System.out.printf("     3|  %3d   %3d   %3d\n",costs[3][0], costs[3][1],costs[3][3]);
                break;
            case 3:
                System.out.printf("                via     \n");
                System.out.printf("   D3 |    1     2 \n");
                System.out.printf("  ----|-----------------\n");
                System.out.printf("     0|  %3d   %3d\n",costs[0][1],costs[0][2]);
                System.out.printf("dest 1|  %3d   %3d\n",costs[1][1],costs[1][2]);
                System.out.printf("     2|  %3d   %3d\n",costs[2][1],costs[2][2]);
                break;
        }
    }

}